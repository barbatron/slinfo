/* tslint:disable */
/* eslint-disable */
/**
 * Planera Resa
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MicrosoftAspNetCoreMvcProblemDetails,
  VTApiPlaneraResaWebV4ModelsApiError,
  VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType,
  VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse,
  VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel,
} from '../models/index';
import {
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorFromJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorToJSON,
    VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeTypeFromJSON,
    VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeTypeToJSON,
    VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeTypeFromJSON,
    VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeTypeToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModelFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModelToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModelFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModelToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponseFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponseToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponseFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponseToJSON,
    VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModelFromJSON,
    VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModelToJSON,
} from '../models/index';

export interface StopAreasGetRequest {
    ifNoneMatch?: string;
}

export interface StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetRequest {
    detailsReference: string;
    stopAreaGid: string;
    includes?: Array<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>;
}

export interface StopAreasStopAreaGidArrivalsGetRequest {
    stopAreaGid: string;
    startDateTime?: Date;
    platforms?: string;
    timeSpanInMinutes?: number;
    maxArrivalsPerLineAndDirection?: number;
    limit?: number;
    offset?: number;
    directionGid?: string;
}

export interface StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetRequest {
    detailsReference: string;
    stopAreaGid: string;
    includes?: Array<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>;
}

export interface StopAreasStopAreaGidDeparturesGetRequest {
    stopAreaGid: string;
    startDateTime?: Date;
    platforms?: string;
    timeSpanInMinutes?: number;
    maxDeparturesPerLineAndDirection?: number;
    limit?: number;
    offset?: number;
    includeOccupancy?: boolean;
    directionGid?: string;
}

/**
 * 
 */
export class StopAreasApi extends runtime.BaseAPI {

    /**
     * Returns all stop areas.
     */
    async stopAreasGetRaw(requestParameters: StopAreasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.ifNoneMatch !== undefined && requestParameters.ifNoneMatch !== null) {
            headerParameters['If-None-Match'] = String(requestParameters.ifNoneMatch);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-areas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModelFromJSON));
    }

    /**
     * Returns all stop areas.
     */
    async stopAreasGet(requestParameters: StopAreasGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VTApiPlaneraResaWebV4ModelsStopAreasStopAreaApiModel>> {
        const response = await this.stopAreasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about an arrival.
     */
    async stopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetRaw(requestParameters: StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel>> {
        if (requestParameters.detailsReference === null || requestParameters.detailsReference === undefined) {
            throw new runtime.RequiredError('detailsReference','Required parameter requestParameters.detailsReference was null or undefined when calling stopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet.');
        }

        if (requestParameters.stopAreaGid === null || requestParameters.stopAreaGid === undefined) {
            throw new runtime.RequiredError('stopAreaGid','Required parameter requestParameters.stopAreaGid was null or undefined when calling stopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-areas/{stopAreaGid}/arrivals/{detailsReference}/details`.replace(`{${"detailsReference"}}`, encodeURIComponent(String(requestParameters.detailsReference))).replace(`{${"stopAreaGid"}}`, encodeURIComponent(String(requestParameters.stopAreaGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModelFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-areas/9021014001760000/arrivals/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about an arrival.
     */
    async stopAreasStopAreaGidArrivalsDetailsReferenceDetailsGet(requestParameters: StopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> {
        const response = await this.stopAreasStopAreaGidArrivalsDetailsReferenceDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-areas/9021014003980000/arrivals
     * Returns arrivals to the specified stop area at the specified time.
     */
    async stopAreasStopAreaGidArrivalsGetRaw(requestParameters: StopAreasStopAreaGidArrivalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse>> {
        if (requestParameters.stopAreaGid === null || requestParameters.stopAreaGid === undefined) {
            throw new runtime.RequiredError('stopAreaGid','Required parameter requestParameters.stopAreaGid was null or undefined when calling stopAreasStopAreaGidArrivalsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = (requestParameters.startDateTime as any).toISOString();
        }

        if (requestParameters.platforms !== undefined) {
            queryParameters['platforms'] = requestParameters.platforms;
        }

        if (requestParameters.timeSpanInMinutes !== undefined) {
            queryParameters['timeSpanInMinutes'] = requestParameters.timeSpanInMinutes;
        }

        if (requestParameters.maxArrivalsPerLineAndDirection !== undefined) {
            queryParameters['maxArrivalsPerLineAndDirection'] = requestParameters.maxArrivalsPerLineAndDirection;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.directionGid !== undefined) {
            queryParameters['directionGid'] = requestParameters.directionGid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-areas/{stopAreaGid}/arrivals`.replace(`{${"stopAreaGid"}}`, encodeURIComponent(String(requestParameters.stopAreaGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponseFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-areas/9021014003980000/arrivals
     * Returns arrivals to the specified stop area at the specified time.
     */
    async stopAreasStopAreaGidArrivalsGet(requestParameters: StopAreasStopAreaGidArrivalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> {
        const response = await this.stopAreasStopAreaGidArrivalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about a departure.
     */
    async stopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetRaw(requestParameters: StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel>> {
        if (requestParameters.detailsReference === null || requestParameters.detailsReference === undefined) {
            throw new runtime.RequiredError('detailsReference','Required parameter requestParameters.detailsReference was null or undefined when calling stopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet.');
        }

        if (requestParameters.stopAreaGid === null || requestParameters.stopAreaGid === undefined) {
            throw new runtime.RequiredError('stopAreaGid','Required parameter requestParameters.stopAreaGid was null or undefined when calling stopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-areas/{stopAreaGid}/departures/{detailsReference}/details`.replace(`{${"detailsReference"}}`, encodeURIComponent(String(requestParameters.detailsReference))).replace(`{${"stopAreaGid"}}`, encodeURIComponent(String(requestParameters.stopAreaGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModelFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-areas/9021014001760000/departures/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about a departure.
     */
    async stopAreasStopAreaGidDeparturesDetailsReferenceDetailsGet(requestParameters: StopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> {
        const response = await this.stopAreasStopAreaGidDeparturesDetailsReferenceDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-areas/9021014003980000/departures
     * Returns departures from the specified stop area at the specified time.
     */
    async stopAreasStopAreaGidDeparturesGetRaw(requestParameters: StopAreasStopAreaGidDeparturesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse>> {
        if (requestParameters.stopAreaGid === null || requestParameters.stopAreaGid === undefined) {
            throw new runtime.RequiredError('stopAreaGid','Required parameter requestParameters.stopAreaGid was null or undefined when calling stopAreasStopAreaGidDeparturesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = (requestParameters.startDateTime as any).toISOString();
        }

        if (requestParameters.platforms !== undefined) {
            queryParameters['platforms'] = requestParameters.platforms;
        }

        if (requestParameters.timeSpanInMinutes !== undefined) {
            queryParameters['timeSpanInMinutes'] = requestParameters.timeSpanInMinutes;
        }

        if (requestParameters.maxDeparturesPerLineAndDirection !== undefined) {
            queryParameters['maxDeparturesPerLineAndDirection'] = requestParameters.maxDeparturesPerLineAndDirection;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.includeOccupancy !== undefined) {
            queryParameters['includeOccupancy'] = requestParameters.includeOccupancy;
        }

        if (requestParameters.directionGid !== undefined) {
            queryParameters['directionGid'] = requestParameters.directionGid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-areas/{stopAreaGid}/departures`.replace(`{${"stopAreaGid"}}`, encodeURIComponent(String(requestParameters.stopAreaGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponseFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-areas/9021014003980000/departures
     * Returns departures from the specified stop area at the specified time.
     */
    async stopAreasStopAreaGidDeparturesGet(requestParameters: StopAreasStopAreaGidDeparturesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> {
        const response = await this.stopAreasStopAreaGidDeparturesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
