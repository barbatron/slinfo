/* tslint:disable */
/* eslint-disable */
/**
 * Planera Resa
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MicrosoftAspNetCoreMvcProblemDetails,
  VTApiPlaneraResaWebV4ModelsApiError,
  VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType,
  VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse,
  VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse,
} from '../models/index';
import {
    MicrosoftAspNetCoreMvcProblemDetailsFromJSON,
    MicrosoftAspNetCoreMvcProblemDetailsToJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorFromJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorToJSON,
    VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeTypeFromJSON,
    VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeTypeToJSON,
    VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeTypeFromJSON,
    VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeTypeToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModelFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModelToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModelFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModelToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponseFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponseToJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponseFromJSON,
    VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponseToJSON,
} from '../models/index';

export interface StopPointsStopPointGidArrivalsDetailsReferenceDetailsGetRequest {
    detailsReference: string;
    stopPointGid: string;
    includes?: Array<VTApiPlaneraResaWebV4ModelsArrivalDetailsIncludeType>;
}

export interface StopPointsStopPointGidArrivalsGetRequest {
    stopPointGid: string;
    startDateTime?: string;
    timeSpanInMinutes?: number;
    maxArrivalsPerLineAndDirection?: number;
    limit?: number;
    offset?: number;
    directionGid?: string;
}

export interface StopPointsStopPointGidDeparturesDetailsReferenceDetailsGetRequest {
    detailsReference: string;
    stopPointGid: string;
    includes?: Array<VTApiPlaneraResaWebV4ModelsDepartureDetailsIncludeType>;
}

export interface StopPointsStopPointGidDeparturesGetRequest {
    stopPointGid: string;
    startDateTime?: string;
    timeSpanInMinutes?: number;
    maxDeparturesPerLineAndDirection?: number;
    limit?: number;
    offset?: number;
    includeOccupancy?: boolean;
    directionGid?: string;
}

/**
 * 
 */
export class StopPointsApi extends runtime.BaseAPI {

    /**
     * Sample request:                    GET /stop-points/9022014001760003/arrivals/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about an arrival.
     */
    async stopPointsStopPointGidArrivalsDetailsReferenceDetailsGetRaw(requestParameters: StopPointsStopPointGidArrivalsDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel>> {
        if (requestParameters.detailsReference === null || requestParameters.detailsReference === undefined) {
            throw new runtime.RequiredError('detailsReference','Required parameter requestParameters.detailsReference was null or undefined when calling stopPointsStopPointGidArrivalsDetailsReferenceDetailsGet.');
        }

        if (requestParameters.stopPointGid === null || requestParameters.stopPointGid === undefined) {
            throw new runtime.RequiredError('stopPointGid','Required parameter requestParameters.stopPointGid was null or undefined when calling stopPointsStopPointGidArrivalsDetailsReferenceDetailsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-points/{stopPointGid}/arrivals/{detailsReference}/details`.replace(`{${"detailsReference"}}`, encodeURIComponent(String(requestParameters.detailsReference))).replace(`{${"stopPointGid"}}`, encodeURIComponent(String(requestParameters.stopPointGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModelFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/arrivals/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about an arrival.
     */
    async stopPointsStopPointGidArrivalsDetailsReferenceDetailsGet(requestParameters: StopPointsStopPointGidArrivalsDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsArrivalDetailsApiModel> {
        const response = await this.stopPointsStopPointGidArrivalsDetailsReferenceDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/arrivals
     * Returns arrivals to the specified stop point at the specified time.
     */
    async stopPointsStopPointGidArrivalsGetRaw(requestParameters: StopPointsStopPointGidArrivalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse>> {
        if (requestParameters.stopPointGid === null || requestParameters.stopPointGid === undefined) {
            throw new runtime.RequiredError('stopPointGid','Required parameter requestParameters.stopPointGid was null or undefined when calling stopPointsStopPointGidArrivalsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        if (requestParameters.timeSpanInMinutes !== undefined) {
            queryParameters['timeSpanInMinutes'] = requestParameters.timeSpanInMinutes;
        }

        if (requestParameters.maxArrivalsPerLineAndDirection !== undefined) {
            queryParameters['maxArrivalsPerLineAndDirection'] = requestParameters.maxArrivalsPerLineAndDirection;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.directionGid !== undefined) {
            queryParameters['directionGid'] = requestParameters.directionGid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-points/{stopPointGid}/arrivals`.replace(`{${"stopPointGid"}}`, encodeURIComponent(String(requestParameters.stopPointGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponseFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/arrivals
     * Returns arrivals to the specified stop point at the specified time.
     */
    async stopPointsStopPointGidArrivalsGet(requestParameters: StopPointsStopPointGidArrivalsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetArrivalsResponse> {
        const response = await this.stopPointsStopPointGidArrivalsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/departures/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about a departure.
     */
    async stopPointsStopPointGidDeparturesDetailsReferenceDetailsGetRaw(requestParameters: StopPointsStopPointGidDeparturesDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel>> {
        if (requestParameters.detailsReference === null || requestParameters.detailsReference === undefined) {
            throw new runtime.RequiredError('detailsReference','Required parameter requestParameters.detailsReference was null or undefined when calling stopPointsStopPointGidDeparturesDetailsReferenceDetailsGet.');
        }

        if (requestParameters.stopPointGid === null || requestParameters.stopPointGid === undefined) {
            throw new runtime.RequiredError('stopPointGid','Required parameter requestParameters.stopPointGid was null or undefined when calling stopPointsStopPointGidDeparturesDetailsReferenceDetailsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.includes) {
            queryParameters['includes'] = requestParameters.includes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-points/{stopPointGid}/departures/{detailsReference}/details`.replace(`{${"detailsReference"}}`, encodeURIComponent(String(requestParameters.detailsReference))).replace(`{${"stopPointGid"}}`, encodeURIComponent(String(requestParameters.stopPointGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModelFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/departures/{detailsReference}/details?includes=servicejourneycalls
     * Returns details about a departure.
     */
    async stopPointsStopPointGidDeparturesDetailsReferenceDetailsGet(requestParameters: StopPointsStopPointGidDeparturesDetailsReferenceDetailsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsDepartureDetailsApiModel> {
        const response = await this.stopPointsStopPointGidDeparturesDetailsReferenceDetailsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/departures
     * Returns departures from the specified stop point at the specified time.
     */
    async stopPointsStopPointGidDeparturesGetRaw(requestParameters: StopPointsStopPointGidDeparturesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse>> {
        if (requestParameters.stopPointGid === null || requestParameters.stopPointGid === undefined) {
            throw new runtime.RequiredError('stopPointGid','Required parameter requestParameters.stopPointGid was null or undefined when calling stopPointsStopPointGidDeparturesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.startDateTime !== undefined) {
            queryParameters['startDateTime'] = requestParameters.startDateTime;
        }

        if (requestParameters.timeSpanInMinutes !== undefined) {
            queryParameters['timeSpanInMinutes'] = requestParameters.timeSpanInMinutes;
        }

        if (requestParameters.maxDeparturesPerLineAndDirection !== undefined) {
            queryParameters['maxDeparturesPerLineAndDirection'] = requestParameters.maxDeparturesPerLineAndDirection;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.includeOccupancy !== undefined) {
            queryParameters['includeOccupancy'] = requestParameters.includeOccupancy;
        }

        if (requestParameters.directionGid !== undefined) {
            queryParameters['directionGid'] = requestParameters.directionGid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/stop-points/{stopPointGid}/departures`.replace(`{${"stopPointGid"}}`, encodeURIComponent(String(requestParameters.stopPointGid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponseFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /stop-points/9022014001760003/departures
     * Returns departures from the specified stop point at the specified time.
     */
    async stopPointsStopPointGidDeparturesGet(requestParameters: StopPointsStopPointGidDeparturesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsDeparturesAndArrivalsGetDeparturesResponse> {
        const response = await this.stopPointsStopPointGidDeparturesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
