/* tslint:disable */
/* eslint-disable */
/**
 * Planera Resa
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VTApiPlaneraResaWebV4ModelsApiError,
  VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType,
  VTApiPlaneraResaWebV4ModelsLocationByTextType,
  VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse,
} from '../models/index';
import {
    VTApiPlaneraResaWebV4ModelsApiErrorFromJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorToJSON,
    VTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeFromJSON,
    VTApiPlaneraResaWebV4ModelsLocationByCoordinatesTypeToJSON,
    VTApiPlaneraResaWebV4ModelsLocationByTextTypeFromJSON,
    VTApiPlaneraResaWebV4ModelsLocationByTextTypeToJSON,
    VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponseFromJSON,
    VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponseToJSON,
} from '../models/index';

export interface LocationsByCoordinatesGetRequest {
    latitude: number;
    longitude: number;
    radiusInMeters?: number;
    types?: Array<VTApiPlaneraResaWebV4ModelsLocationByCoordinatesType>;
    limit?: number;
    offset?: number;
    bodSearch?: boolean;
}

export interface LocationsByTextGetRequest {
    q: string;
    types?: Array<VTApiPlaneraResaWebV4ModelsLocationByTextType>;
    limit?: number;
    offset?: number;
    bodSearch?: boolean;
    latitude?: number;
    longitude?: number;
}

/**
 * 
 */
export class LocationsApi extends runtime.BaseAPI {

    /**
     * Sample request:                    GET /locations/by-coordinates?latitude=57.708734&longitude=11.974764&radiusInMeters=500&limit=10&offset=0
     * Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
     */
    async locationsByCoordinatesGetRaw(requestParameters: LocationsByCoordinatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>> {
        if (requestParameters.latitude === null || requestParameters.latitude === undefined) {
            throw new runtime.RequiredError('latitude','Required parameter requestParameters.latitude was null or undefined when calling locationsByCoordinatesGet.');
        }

        if (requestParameters.longitude === null || requestParameters.longitude === undefined) {
            throw new runtime.RequiredError('longitude','Required parameter requestParameters.longitude was null or undefined when calling locationsByCoordinatesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.latitude !== undefined) {
            queryParameters['latitude'] = requestParameters.latitude;
        }

        if (requestParameters.longitude !== undefined) {
            queryParameters['longitude'] = requestParameters.longitude;
        }

        if (requestParameters.radiusInMeters !== undefined) {
            queryParameters['radiusInMeters'] = requestParameters.radiusInMeters;
        }

        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.bodSearch !== undefined) {
            queryParameters['bodSearch'] = requestParameters.bodSearch;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/locations/by-coordinates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponseFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /locations/by-coordinates?latitude=57.708734&longitude=11.974764&radiusInMeters=500&limit=10&offset=0
     * Returns the locations nearest the specified coordinates. Currently only stop areas, stop points and meta-stations are supported.
     */
    async locationsByCoordinatesGet(requestParameters: LocationsByCoordinatesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> {
        const response = await this.locationsByCoordinatesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sample request:                    GET /locations/by-text?q=brunnsparken&limit=10&offset=0
     * Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
     */
    async locationsByTextGetRaw(requestParameters: LocationsByTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse>> {
        if (requestParameters.q === null || requestParameters.q === undefined) {
            throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling locationsByTextGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        if (requestParameters.types) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.bodSearch !== undefined) {
            queryParameters['bodSearch'] = requestParameters.bodSearch;
        }

        if (requestParameters.latitude !== undefined) {
            queryParameters['latitude'] = requestParameters.latitude;
        }

        if (requestParameters.longitude !== undefined) {
            queryParameters['longitude'] = requestParameters.longitude;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/locations/by-text`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponseFromJSON(jsonValue));
    }

    /**
     * Sample request:                    GET /locations/by-text?q=brunnsparken&limit=10&offset=0
     * Returns locations matching the specified text. Currently only stop areas, addresses, points of interest and meta-stations are supported.
     */
    async locationsByTextGet(requestParameters: LocationsByTextGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<VTApiPlaneraResaWebV4ModelsLocationsGetLocationsResponse> {
        const response = await this.locationsByTextGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
