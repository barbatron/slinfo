/* tslint:disable */
/* eslint-disable */
/**
 * Planera Resa
 * Sök och planera resor med Västtrafik
 *
 * The version of the OpenAPI document: v4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  VTApiPlaneraResaCoreModelsPositionTransportMode,
  VTApiPlaneraResaWebV4ModelsApiError,
  VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel,
} from '../models/index';
import {
    VTApiPlaneraResaCoreModelsPositionTransportModeFromJSON,
    VTApiPlaneraResaCoreModelsPositionTransportModeToJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorFromJSON,
    VTApiPlaneraResaWebV4ModelsApiErrorToJSON,
    VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModelFromJSON,
    VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModelToJSON,
} from '../models/index';

export interface PositionsGetRequest {
    lowerLeftLat: number;
    lowerLeftLong: number;
    upperRightLat: number;
    upperRightLong: number;
    transportModes?: Array<VTApiPlaneraResaCoreModelsPositionTransportMode>;
    detailsReferences?: Array<string>;
    lineDesignations?: Array<string>;
    limit?: number;
}

/**
 * 
 */
export class PositionsApi extends runtime.BaseAPI {

    /**
     * Sample request:                    GET /positions?lowerLeftLat=57.721723&lowerLeftLong=12.011882&upperRightLat=57.737549&upperRightLong=12.039268&limit=100
     * Returns journey positions within a bounding box
     */
    async positionsGetRaw(requestParameters: PositionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel>>> {
        if (requestParameters.lowerLeftLat === null || requestParameters.lowerLeftLat === undefined) {
            throw new runtime.RequiredError('lowerLeftLat','Required parameter requestParameters.lowerLeftLat was null or undefined when calling positionsGet.');
        }

        if (requestParameters.lowerLeftLong === null || requestParameters.lowerLeftLong === undefined) {
            throw new runtime.RequiredError('lowerLeftLong','Required parameter requestParameters.lowerLeftLong was null or undefined when calling positionsGet.');
        }

        if (requestParameters.upperRightLat === null || requestParameters.upperRightLat === undefined) {
            throw new runtime.RequiredError('upperRightLat','Required parameter requestParameters.upperRightLat was null or undefined when calling positionsGet.');
        }

        if (requestParameters.upperRightLong === null || requestParameters.upperRightLong === undefined) {
            throw new runtime.RequiredError('upperRightLong','Required parameter requestParameters.upperRightLong was null or undefined when calling positionsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.lowerLeftLat !== undefined) {
            queryParameters['lowerLeftLat'] = requestParameters.lowerLeftLat;
        }

        if (requestParameters.lowerLeftLong !== undefined) {
            queryParameters['lowerLeftLong'] = requestParameters.lowerLeftLong;
        }

        if (requestParameters.upperRightLat !== undefined) {
            queryParameters['upperRightLat'] = requestParameters.upperRightLat;
        }

        if (requestParameters.upperRightLong !== undefined) {
            queryParameters['upperRightLong'] = requestParameters.upperRightLong;
        }

        if (requestParameters.transportModes) {
            queryParameters['transportModes'] = requestParameters.transportModes;
        }

        if (requestParameters.detailsReferences) {
            queryParameters['detailsReferences'] = requestParameters.detailsReferences;
        }

        if (requestParameters.lineDesignations) {
            queryParameters['lineDesignations'] = requestParameters.lineDesignations;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("auth", []);
        }

        const response = await this.request({
            path: `/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModelFromJSON));
    }

    /**
     * Sample request:                    GET /positions?lowerLeftLat=57.721723&lowerLeftLong=12.011882&upperRightLat=57.737549&upperRightLong=12.039268&limit=100
     * Returns journey positions within a bounding box
     */
    async positionsGet(requestParameters: PositionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<VTApiPlaneraResaWebV4ModelsPositionsJourneyPositionApiModel>> {
        const response = await this.positionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
